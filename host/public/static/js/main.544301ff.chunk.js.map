{"version":3,"sources":["components/generic/Panel/Panel.js","components/generic/Input/Input.js","components/generic/TimeComponent/TimeComponent.js","classes/Timer.js","components/generic/DisplayTime/DisplayTime.js","components/generic/ProgressCircle/ProgressCircle.js","components/generic/MatIcon.js","components/generic/Button/Button.js","utils/helpers.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","classes/Interval.js","context/AppContext.js","components/documentation/DocumentComponent.js","components/generic/ProgressBar/ProgressBar.js","views/DocumentationView.js","components/generic/WorkoutDisplay/WorkoutDispaly.js","views/TimersView.js","views/WorkoutView.js","App.js","index.js"],"names":["Panel","className","this","props","join","children","Component","Input","type","value","disabled","min","max","onValueChange","title","onChange","e","target","defaultProps","TimeComponent","prependZero","label","showColon","readOnly","classList","filter","x","length","TimeDisplay","SECOND","MINUTE","HOUR","DAY","YEAR","MONTH","TIME_ENUM","MILLISECOND","Timer","years","months","days","hours","minutes","seconds","milliseconds","rounds","tickSize","countdownMode","intervalFunctions","onFinished","onStart","onReset","stopWatchMode","serializedState","deserialize","_years","_months","_days","_hours","_minutes","_seconds","_milliseconds","_rounds","_currentRound","_roundsCompleted","countdownInterval","_isRunning","_isDone","forEach","prop","Object","defineProperty","get","set","parseInt","initializeTime","setCurrentTime","_currentTime","millisecondsTotal","hour","timeUnit","refresh","resetToCurrentTime","intitalizeToZero","_totalTime","_roundTime","triggerOnStart","isTimerComplete","setInterval","tick","clear","func","triggerOnFinished","clearInterval","triggerOnReset","intervalFunction","push","isNaN","Math","floor","timeElapsed","timeString","currentYears","currentDays","currentMonths","currentHours","currentMinutes","currentSeconds","currentMilliseconds","DisplayTime","setIsValidInput","useContext","AppContext","useState","setHours","setMinutes","setSeconds","setMilliseconds","useEffect","timer","timerTick","pushIntervalFunction","triggerOnFinishedOnUnmount","clean","showComponents","components","name","update","map","component","i","isValidInput","ProgressCircle","progress","size","thickness","MatIcon","Button","onButtonClick","tooltip","onClick","PlayPauseButton","paused","start","pause","ButtonsPanel","reset","fastForward","toggleEdit","editMode","workoutStart","WorkoutPanel","workoutEditMode","addWorkout","isValid","config","serialize","CongratsPanel","show","startFunc","Stopwatch","StopwatchTimer","setDone","isDone","startNextTimer","currentTimer","setWorkoutStart","setEditMode","setProgress","setPaused","percentComplete","ReactTooltip","rebuild","readOnlyMode","Countdown","CountDownTimer","XY","XYTimer","roundProgress","setRoundProgress","round","setRound","setTimerState","roundPercentComplete","currentRound","Tabata","IntervalTabata","timers","TabataTimerA","TabataTimerB","progressTabataTimerA","setProgressTabataTimerA","progressTabataTimerB","setProgressTabataTimerB","progressRound","currentProgress","updateInterval","roundPercentage","resetTime","finish","Interval","completedRounds","_completedRounds","_currentTimerIndex","intializeTimers","state","timerState","isLastTimer","roundTime","currentRoundTime","currentTime","totalTime","reduce","prev","curr","index","finishRound","validState","React","createContext","WorkoutTimer","AppProvider","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setItem","stringify","usePersistedState","timerIndex","setTimerIndex","setWorkoutEditMode","workoutQueue","setWorkoutQueue","currentWorkout","setCurrentWorkout","setCurrentTimer","setStartNextTimer","setIsLastTimer","queueBackup","setQueueBackup","queueDuration","setQueueDuration","C","CalculateQueueDuration","queue","intervalTime","workout","GetSerializedTimerFromState","stateCopy","entries","popQueue","shift","newQueue","Provider","toString","deleteWorkout","splice","runAgain","DocumentComponent","propDocs","doc","description","defaultValue","ProgressBar","position","background","Container","styled","div","Documentation","unpack","propsArray","WorkoutDisplay","setTimeString","App","PrepareTimer","TimerComponent","to","WorkoutView","CurrentTimer","href","path","DocumentationView","ReactDOM","render","StrictMode","place","effect","delayShow","document","getElementById"],"mappings":"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","file":"static/js/main.544301ff.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Panel.scss';\n\nclass Panel extends Component {\n  render() {\n    const { className } = this.props;\n    return <div className={['relative rounded p-4', className].join(\" \")}>{this.props.children}</div>;\n  }\n}\n\nexport default Panel;","import PropTypes from 'prop-types';\nimport './Input.scss';\n\nconst Input = (props) => {\n  const { type, value, disabled, className, min, max, onValueChange, title } = props;\n  return <input className={[\"timer-input timer-font\", className].join(\" \")}\n    type={type}\n    value={value}\n    min={min}\n    max={max}\n    disabled={disabled}\n    title={title}\n    onChange={e => onValueChange(e.target.value)}></input>;\n}\n\nInput.propTypes = {\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]).isRequired,\n  disabled: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  onValueChange: PropTypes.func\n}\n\nInput.defaultProps = {\n  type: \"number\",\n  disabled: false,\n  min: 0,\n  onValueChange: () => { }\n}\n\nexport default Input;","import { Component } from 'react';\nimport Input from './../Input/Input.js';\nimport PropTypes from 'prop-types';\n\nimport './TimeComponent.scss';\n\nclass TimeComponent extends Component {\n    render() {\n        const { prependZero, value, label, className,\n            showColon, readOnly, onValueChange } = this.props;\n\n        // Create CSS class string from array\n        const classList = ['time-component',\n            className,\n            showColon ? \"colon\" : \"no-colon\",\n            readOnly ? \"readonly-mode\" : \"input-mode\"]\n            .filter(x => typeof x === 'string' && x.length > 0)\n            .join(\" \");\n\n        let TimeDisplay = null;\n        if (readOnly)\n            /* Static - non-editable part of component. Only shows when readOnly is set to true*/\n            TimeDisplay = <div>\n                {prependZero && value < 10 && <span className='timer-font zero'>0</span>}\n                <span className={'timer-font' + (value === 0 ? ' zero' : '')}>{value}</span></div>;\n        else\n            /* Editable part of component, shown when readOnly is false */\n            TimeDisplay = <div><Input value={value} title={label} onValueChange={e => onValueChange(e)}></Input></div>;\n\n        return <div className={classList}>\n            {TimeDisplay}\n            {label && <div className=\"label\">{label}</div>}\n        </div>;\n    }\n}\n\nTimeComponent.propTypes = {\n    value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    prependZero: PropTypes.bool,\n    label: PropTypes.string,\n    className: PropTypes.string,\n    showColon: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    onValueChange: PropTypes.func\n}\n\nTimeComponent.defaultProps = {\n    value: 0,\n    prependZero: false,\n    label: null,\n    className: null,\n    showColon: false,\n    readOnly: true,\n    onValueChange: () => { }\n}\n\nexport default TimeComponent;","const MILLISECOND = 1;\r\nconst SECOND = 1000 * MILLISECOND;\r\nconst MINUTE = SECOND * 60;\r\nconst HOUR = MINUTE * 60;\r\nconst DAY = 24 * HOUR;\r\nconst YEAR = 365 * DAY;\r\nconst MONTH = YEAR / 12;\r\n\r\n// Time Enums in milliseconds\r\nexport const TIME_ENUM = {\r\n  MILLISECOND: MILLISECOND,\r\n  SECOND: SECOND,\r\n  MINUTE: MINUTE,\r\n  HOUR: HOUR,\r\n  DAY: DAY,\r\n  YEAR: YEAR,\r\n  MONTH: MONTH,\r\n};\r\n\r\n// Creates Timer Object\r\nexport class Timer {\r\n  constructor({\r\n    years = 0,\r\n    months = 0,\r\n    days = 0,\r\n    hours = 0,\r\n    minutes = 0,\r\n    seconds = 0,\r\n    milliseconds = 0,\r\n    rounds = 1,\r\n    tickSize = MILLISECOND * 52, // sets the amount increased/decreased on each tick\r\n    countdownMode = true, // when set to true, we count down to passed time values\r\n    // and when countdownMode is true, we count up to the passed value\r\n    intervalFunctions = [], // functions which are executed during each tick of the timer,\r\n    onFinished = null,\r\n    onStart = null,\r\n    onReset = null,\r\n    stopWatchMode = false,\r\n    serializedState = null,\r\n  } = {}) {\r\n    if (serializedState) {\r\n      this.deserialize(serializedState);\r\n    } else {\r\n      this._years = years;\r\n      this._months = months;\r\n      this._days = days;\r\n      this._hours = hours;\r\n      this._minutes = minutes;\r\n      this._seconds = seconds;\r\n      this._milliseconds = milliseconds;\r\n      this._rounds = this._currentRound = rounds;\r\n    }\r\n    this._roundsCompleted = 0;\r\n    this.tickSize = tickSize;\r\n    this.countdownInterval = null;\r\n    this.intervalFunctions = [...intervalFunctions];\r\n    this.countdownMode = countdownMode;\r\n    this.onFinished = onFinished;\r\n    this.onStart = onStart;\r\n    this.onReset = onReset;\r\n    this.stopWatchMode = stopWatchMode;\r\n    this._isRunning = false;\r\n    this._isDone = false;\r\n\r\n    // defines getters and setters for time components\r\n    [\r\n      \"years\",\r\n      \"months\",\r\n      \"days\",\r\n      \"hours\",\r\n      \"minutes\",\r\n      \"seconds\",\r\n      \"milliseconds\",\r\n    ].forEach((prop) => {\r\n      Object.defineProperty(this, prop, {\r\n        get: function () {\r\n          return this[`_${prop}`];\r\n        },\r\n        set: function (value) {\r\n          this[`_${prop}`] = parseInt(value);\r\n          this.initializeTime(this.stopWatchMode || this.countdownMode);\r\n        },\r\n      });\r\n    });\r\n    this.initializeTime(this.countdownMode);\r\n  }\r\n\r\n  deserialize(serializedState, setCurrentTime = false) \r\n  {\r\n    if (setCurrentTime) {\r\n      this._currentTime = 0;\r\n      let millisecondsTotal = 0;\r\n      if (serializedState.milliseconds)\r\n        millisecondsTotal += serializedState.milliseconds;\r\n      if (serializedState.seconds)\r\n        millisecondsTotal += serializedState.seconds * SECOND;\r\n      if (serializedState.minutes)\r\n        millisecondsTotal += serializedState.minutes * MINUTE;\r\n      if (serializedState.hours)\r\n        millisecondsTotal += serializedState.hour * HOUR;\r\n      if (serializedState.days)\r\n        millisecondsTotal += serializedState.days * DAY;\r\n      if (serializedState.months)\r\n        millisecondsTotal += serializedState.months * MONTH;\r\n      if (serializedState.years)\r\n        millisecondsTotal += serializedState.years * YEAR;\r\n      this._currentTime = millisecondsTotal;\r\n    } else {\r\n      this._years = 0;\r\n      this._months = 0;\r\n      this._days = 0;\r\n      this._hours = 0;\r\n      this._minutes = 0;\r\n      this._seconds = 0;\r\n      this._milliseconds = 0;\r\n      for (let timeUnit of [\r\n        \"years\",\r\n        \"months\",\r\n        \"days\",\r\n        \"hours\",\r\n        \"minutes\",\r\n        \"seconds\",\r\n        \"milliseconds\",\r\n      ]) {\r\n        if (serializedState[timeUnit]) {\r\n          this[\"_\" + timeUnit] = serializedState[timeUnit];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (serializedState.rounds)\r\n      this._rounds = this._currentRound = serializedState.rounds;\r\n    else this._rounds = this._currentRound = 1;\r\n\r\n    if (!setCurrentTime) this.initializeTime(this.countdownMode);\r\n    this.refresh();\r\n  }\r\n\r\n  serialize() {\r\n    return {\r\n      milliseconds: this.milliseconds,\r\n      minutes: this.minutes,\r\n      seconds: this.seconds,\r\n      hours: this.hours,\r\n      rounds: this.rounds,\r\n    };\r\n  }\r\n\r\n  initializeTime(resetToCurrentTime = true, intitalizeToZero) {\r\n    // Converts all time components to milliseconds;\r\n\r\n    let millisecondsTotal = 0;\r\n\r\n    if (!intitalizeToZero)\r\n      millisecondsTotal +=\r\n        this._milliseconds +\r\n        this._seconds * SECOND +\r\n        this._minutes * MINUTE +\r\n        this._hours * HOUR +\r\n        this._days * DAY +\r\n        this._months * MONTH +\r\n        this._years * YEAR;\r\n    else {\r\n      this._years = 0;\r\n      this._months = 0;\r\n      this._days = 0;\r\n      this._hours = 0;\r\n      this._minutes = 0;\r\n      this._seconds = 0;\r\n      this._milliseconds = 0;\r\n      this._rounds = 1;\r\n    }\r\n\r\n    if (this.countdownMode || resetToCurrentTime) {\r\n      // Counting down from Start Time to 0\r\n      this._currentTime = millisecondsTotal;\r\n    } else {\r\n      // Counting up form 0 to End Time\r\n      this._currentTime = 0;\r\n    }\r\n\r\n    this._currentRound = this.rounds;\r\n    this._roundsCompleted = 0;\r\n    this._totalTime = millisecondsTotal * this.rounds;\r\n    this._roundTime = millisecondsTotal;\r\n  }\r\n\r\n  tick() {\r\n    // increases or decreases time on each tick\r\n    if (this.countdownMode) {\r\n      // COUNTING DOWN\r\n      this._currentTime -= this.tickSize;\r\n      if (this._currentTime <= 0) {\r\n        if (this._currentRound > 0) this._currentRound--;\r\n        if (this._currentRound > 0) {\r\n          this._currentTime = this._roundTime - this._currentTime;\r\n        } else {\r\n          this._roundsCompleted++;\r\n          this._currentTime = 0;\r\n        }\r\n      }\r\n    } else {\r\n      // CONTING UP\r\n      this._currentTime += this.tickSize;\r\n      if (this._currentTime >= this._roundTime) {\r\n        if (this._currentRound > 0) this._currentRound--;\r\n        if (this._currentRound > 0) {\r\n          this._currentTime = this._currentTime - this._roundTime;\r\n        } else {\r\n          this._roundsCompleted++;\r\n          this._currentTime = this._roundTime;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  start(initializeTime = true, triggerOnStart = true) {\r\n    if (this.countdownInterval === null) {\r\n      if (this.onStart && triggerOnStart) this.onStart(this);\r\n      this._isDone = false;\r\n      if (initializeTime || this.isTimerComplete)\r\n        this.initializeTime(this.countdownMode);\r\n      this._isRunning = true;\r\n      this.countdownInterval = setInterval(() => {\r\n        this.tick();\r\n        this.refresh();\r\n        if (this.isTimerComplete) this.clear();\r\n      }, this.tickSize);\r\n    }\r\n  }\r\n\r\n  refresh() {\r\n    if (this.intervalFunctions)\r\n      this.intervalFunctions.forEach((func) => {\r\n        func(this);\r\n      });\r\n  }\r\n\r\n  clean() {\r\n    this.intervalFunctions.length = 0;\r\n  }\r\n\r\n  clear(triggerOnFinished = true) {\r\n    clearInterval(this.countdownInterval);\r\n    this._isRunning = false;\r\n    this.countdownInterval = null;\r\n    if (\r\n      triggerOnFinished &&\r\n      this.onFinished &&\r\n      typeof this.onFinished === \"function\"\r\n    ) {\r\n      this.onFinished();\r\n    }\r\n  }\r\n\r\n  reset(triggerOnReset = true) {\r\n    if(this.onReset && triggerOnReset) this.onReset(this);\r\n    this.initializeTime(this.countdownMode);\r\n    this.intervalFunctions.forEach((func) => {\r\n      func(this);\r\n    });\r\n  }\r\n\r\n  finishRound() {\r\n    if (!this.isTimerComplete) {\r\n      clearInterval(this.countdownInterval);\r\n      this.countdownInterval = null;\r\n      if (this.countdownMode) {\r\n        // COUNTING DOWN\r\n        this._currentTime = 0;\r\n      } else {\r\n        // COUNTING UP\r\n        this._currentTime = this._roundTime;\r\n      }\r\n\r\n      this.intervalFunctions.forEach((func) => {\r\n        func(this);\r\n      });\r\n      if (this.onFinished && typeof this.onFinished === \"function\") {\r\n        this.onFinished();\r\n      }\r\n    }\r\n  }\r\n\r\n  pushIntervalFunction(intervalFunction) {\r\n    this.intervalFunctions.push(intervalFunction);\r\n  }\r\n\r\n  valueOf() {\r\n    return this._currentTime;\r\n  }\r\n\r\n  get rounds() {\r\n    return this._rounds;\r\n  }\r\n\r\n  set rounds(value) {\r\n    if (isNaN(value) || value < 0) value = 0;\r\n    this._rounds = parseInt(value);\r\n    this.initializeTime();\r\n  }\r\n\r\n  get isRunning() {\r\n    return this._isRunning;\r\n  }\r\n\r\n  get roundPercentComplete() {\r\n    return Math.floor(10000 * (this._currentTime / this._roundTime));\r\n  }\r\n\r\n  get percentComplete() {\r\n    return Math.floor(\r\n      (10000 * this.timeElapsed) / this._totalTime\r\n    );\r\n  }\r\n\r\n  get timeElapsed(){\r\n    let rounds;\r\n    if (this.countdownMode) {\r\n      if (this._currentRound - 1 < 0) return 0;\r\n      rounds = this._currentRound - 1;\r\n    } else rounds = this._roundsCompleted;\r\n    return rounds * this._roundTime + this._currentTime;\r\n  }\r\n\r\n  get minutePercentComplete() {\r\n    return Math.floor((10000 * (this._currentTime % MINUTE)) / MINUTE);\r\n  }\r\n\r\n  get currentRound() {\r\n    return this._currentRound;\r\n  }\r\n\r\n  get currentYears() {\r\n    return Math.floor(this._currentTime / YEAR);\r\n  }\r\n\r\n  get currentMonths() {\r\n    return Math.floor((this._currentTime % YEAR) / MONTH);\r\n  }\r\n\r\n  get currentDays() {\r\n    return Math.floor((this._currentTime % MONTH) / DAY);\r\n  }\r\n\r\n  get currentHours() {\r\n    return Math.floor((this._currentTime % DAY) / HOUR);\r\n  }\r\n\r\n  get currentMinutes() {\r\n    return Math.floor((this._currentTime % HOUR) / MINUTE);\r\n  }\r\n\r\n  get currentSeconds() {\r\n    return Math.floor((this._currentTime % MINUTE) / SECOND);\r\n  }\r\n\r\n  get currentMilliseconds() {\r\n    return Math.floor((this._currentTime % SECOND) / MILLISECOND);\r\n  }\r\n\r\n  get isRoundComplete() {\r\n    if (this.countdownMode) return this._currentTime === 0;\r\n    return this._currentTime === this._roundTime;\r\n  }\r\n\r\n  get totalTime() {\r\n    return this._totalTime;\r\n  }\r\n\r\n  get isTimerComplete() {\r\n    // stopwatch has no end time\r\n    if (this.stopWatchMode) return false;\r\n    // tells weather times is finished\r\n    if (this.countdownMode)\r\n      return this._currentRound === 0 && this._currentTime === 0;\r\n    return this._currentRound === 0 && this._currentTime === this._roundTime;\r\n  }\r\n\r\n  get isTimerNotComplete() {\r\n    return !this.isTimerComplete;\r\n  }\r\n\r\n  destroy() {\r\n    clearInterval(this.countdownInterval);\r\n    this.intervalFunctions = null;\r\n  }\r\n\r\n  static get TIME_ENUM() {\r\n    return TIME_ENUM;\r\n  }\r\n\r\n  toString() {\r\n    let timeString = [];\r\n    if (this.currentYears) timeString.push(`${this.currentDays}y`);\r\n    if (this.currentMonths) timeString.push(`${this.currentDays}m`);\r\n    if (this.currentDays) timeString.push(`${this.currentDays}d`);\r\n    if (this.currentHours) timeString.push(`${this.currentHours}h`);\r\n    if (this.currentMinutes) timeString.push(`${this.currentMinutes}m`);\r\n    if (this.currentSeconds) timeString.push(`${this.currentSeconds}s`);\r\n    if (this.currentMilliseconds)\r\n      timeString.push(`${this.currentMilliseconds}ms`);\r\n    return timeString.join(\" \");\r\n  }\r\n\r\n  isValidInput() {\r\n    return (\r\n      !(\r\n        isNaN(this.milliseconds) ||\r\n        isNaN(this.seconds) ||\r\n        isNaN(this.minutes) ||\r\n        isNaN(this.hours)\r\n      ) &&\r\n      !(\r\n        this.hours === 0 &&\r\n        this.minutes === 0 &&\r\n        this.seconds === 0 &&\r\n        this.milliseconds === 0\r\n      ) &&\r\n      this.rounds !== 0 &&\r\n      !isNaN(this.rounds)\r\n    );\r\n  }\r\n}\r\n","import { useState, useEffect, useContext } from 'react';\r\nimport './DisplayTime.scss';\r\nimport TimeComponent from '../TimeComponent/TimeComponent';\r\nimport PropTypes from 'prop-types';\r\nimport { Timer } from '../../../classes/Timer';\r\nimport { AppContext } from \"./../../../context/AppContext\";\r\n\r\nconst DisplayTime = function (props) {\r\n\r\n  const { setIsValidInput } = useContext(AppContext);\r\n\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [milliseconds, setMilliseconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (props.timer) {\r\n      const timerTick = (timer) => {\r\n        setHours(timer.currentHours);\r\n        setMinutes(timer.currentMinutes);\r\n        setSeconds(timer.currentSeconds);\r\n        setMilliseconds(timer.currentMilliseconds);\r\n      };\r\n      props.timer.pushIntervalFunction(timerTick);\r\n      timerTick(props.timer);\r\n    }\r\n    return () => {\r\n      if (props.triggerOnFinishedOnUnmount) {\r\n        props.timer.clear(false);\r\n        props.timer.clean();\r\n      }\r\n    };\r\n  }, [props.timer, props.triggerOnFinishedOnUnmount]); \r\n\r\n  const { className, readOnly, showComponents } = props;\r\n\r\n  // Timer class also support Years, Months, Days but these time units aren't appropriate for timer use\r\n  const components = []\r\n\r\n  if (showComponents.hours) components.push({ label: \"h\", prependZero: true, name: \"hours\", update: setHours, value: hours });\r\n  if (showComponents.minutes) components.push({ label: \"m\", prependZero: true, name: \"minutes\", update: setMinutes, value: minutes });\r\n  if (showComponents.seconds) components.push({ label: \"s\", prependZero: true, name: \"seconds\", update: setSeconds, value: seconds });\r\n  if (showComponents.milliseconds) components.push({ label: \"ms\", prependZero: false, name: \"milliseconds\", update: setMilliseconds, value: milliseconds });\r\n\r\n  return <div className={['time-components', className].join(\" \")}>\r\n    {components.map((component, i) =>\r\n      <TimeComponent value={component.value}\r\n        key={component.label}\r\n        label={component.label}\r\n        prependZero={component.prependZero}\r\n        readOnly={readOnly}\r\n        showColon={i !== 0}\r\n        onValueChange={e => {\r\n          props.timer[component.name] = e;\r\n          component.update(e);\r\n\r\n          setIsValidInput(props.timer.isValidInput());\r\n\r\n        }}></TimeComponent>)}\r\n  </div>;\r\n}\r\n\r\nDisplayTime.propTypes = {\r\n  timer: PropTypes.instanceOf(Timer),\r\n  className: PropTypes.string,\r\n  readOnly: PropTypes.bool,\r\n  showComponents: PropTypes.object,\r\n  triggerOnFinishedOnUnmount: PropTypes.bool\r\n}\r\n\r\nDisplayTime.defaultProps = {\r\n  timer: new Timer(0),\r\n  className: null,\r\n  readOnly: true,\r\n  showComponents: {\r\n    hours: true,\r\n    minutes: true,\r\n    seconds: true,\r\n    milliseconds: true\r\n  },\r\n  triggerOnFinishedOnUnmount: true\r\n}\r\n\r\nexport default DisplayTime;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ProgressCircle.scss';\n\nclass ProgressCircle extends Component {\n    render() {\n        const { progress, className,  children, size, thickness } = this.props;\n        return <div className={[`size-${size}`, `thickness-${thickness}`, 'ProgressCircle', className].join(\" \")}>\n            <div className={['overlay', \"progress-\" + progress].join(\" \")}>\n                <div className={['InnerCircle'].join(\" \")}>\n                    {children}\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nProgressCircle.propTypes = {\n    progress: PropTypes.number,\n    className: PropTypes.string,\n    thickness: PropTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl\"]),\n    size: PropTypes.oneOf([\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl\"])\n}\n\nProgressCircle.defaultProps = {\n    progress: 0,\n    className: null,\n    thickness: \"sm\",\n    size: \"lg\"\n}\n\nexport default ProgressCircle;","const MatIcon = (props) => {\n  const { children } = props;\n  return  <span className=\"material-icons-outlined size-32\">{children}</span>;\n}\nexport default MatIcon;\n\nMatIcon.propTypes = {} \nMatIcon.defaultProps = {}","import './Button.scss';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) => {\n  const { disabled, onButtonClick, children, tooltip, className } = props;\n  return <button\n    data-tip={tooltip}\n    className={['app-button round-button', className].join(\" \")}\n    disabled={disabled}\n    onClick={e => onButtonClick(e.target.value)}>\n    {children}\n  </button>;\n}\n\nexport default Button;\n\nButton.propTypes = {\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.string,\n  onButtonClick: PropTypes.func\n}\n\nButton.defaultProps = {\n  children: \"Button\",\n  disabled: false,\n  className: \"\",\n  tooltip: null,\n  onButtonClick: () => { }\n}","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\r\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\r\n// everywhere.\r\n\r\nimport MatIcon from \"./../components/generic/MatIcon\";\r\nimport Button from \"./../components/generic/Button/Button\";\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nexport const PlayPauseButton = (paused, start, pause) => {\r\n    if (!paused) {\r\n        return <Button onButtonClick={start} tooltip=\"Start\">\r\n            <MatIcon>play_arrow</MatIcon>\r\n        </Button>;\r\n    }\r\n    return <Button onButtonClick={pause} tooltip=\"Stop\">\r\n        <MatIcon>pause</MatIcon>\r\n    </Button>\r\n}\r\n\r\nexport const ButtonsPanel = (paused, start, pause, reset, fastForward, toggleEdit, editMode, workoutStart) => {\r\n    return <div className=\"buttons-panel\">\r\n        {PlayPauseButton(paused, start, pause)}\r\n        <Button onButtonClick={reset} tooltip=\"Reset\" ><MatIcon>restart_alt</MatIcon></Button>\r\n        <Button onButtonClick={fastForward} tooltip=\"Finish\" >\r\n            <MatIcon>fast_forward</MatIcon>\r\n        </Button>\r\n        {workoutStart && <Button onButtonClick={toggleEdit} tooltip={editMode ? \"Exit Edit\" : \"Edit\"}>\r\n            <MatIcon>{editMode ? \"edit_off\" : \"edit\"}</MatIcon>\r\n        </Button>}\r\n    </div>\r\n}\r\n\r\nexport const WorkoutPanel = (workoutEditMode, addWorkout, value, isValid) => {\r\n    return (workoutEditMode && (<div className=\"text-center m-t-1\">\r\n        <Button disabled={!isValid} tooltip={isValid ? \"Enter numerical values for times and rounds\" : null} className='p-1 bold' onButtonClick={() => {\r\n            addWorkout({ type: value.type, config: value.timer.serialize() });\r\n        }}><MatIcon>fitness_center</MatIcon> Add Workout</Button></div>))\r\n};\r\n\r\nexport const CongratsPanel = (show, startFunc) => {\r\n    if (show)\r\n        return <div className=\"congrats\">\r\n            Well done! 💪\r\n            <Button onButtonClick={startFunc} className=\"m-l-2 p-1\">\r\n                <MatIcon>restart_alt</MatIcon> Run Again\r\n            </Button>\r\n        </div>\r\n    return;\r\n}\r\n\r\n// Copied from lecture\r\nexport const usePrevious = value => {\r\n    const ref = useRef(value);\r\n\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]);\r\n\r\n    return ref.current;\r\n};\r\n\r\n// Copied from lecture\r\nexport const usePersistedState = (key, initialValue) => {\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        try {\r\n            // Read initial value from local storage or fallback to the given initial value\r\n            const item = window.localStorage.getItem(key);\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return initialValue;\r\n        }\r\n    });\r\n\r\n    const setValue = value => {\r\n        try {\r\n            setStoredValue(value);\r\n            window.localStorage.setItem(key, JSON.stringify(value));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return [storedValue, setValue];\r\n};","import { useContext, useEffect, useState } from \"react\";\r\nimport Panel from \"./../generic/Panel/Panel\";\r\nimport DisplayTime from \"./../generic/DisplayTime/DisplayTime\";\r\nimport ProgressCircle from \"./../generic/ProgressCircle/ProgressCircle\";\r\nimport { ButtonsPanel, CongratsPanel, WorkoutPanel } from '../../utils/helpers';\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Stopwatch = () => {\r\n\r\n  const { StopwatchTimer, setDone, isDone, workoutEditMode, \r\n          isValidInput, setIsValidInput, addWorkout, workoutStart, \r\n          startNextTimer, currentTimer, setWorkoutStart } = useContext(AppContext);\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [paused, setPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Add state tick update and complet events to timer object\r\n    StopwatchTimer.pushIntervalFunction((StopwatchTimer) => { setProgress(StopwatchTimer.percentComplete); })\r\n\r\n    setProgress(StopwatchTimer.percentComplete);\r\n\r\n    // Needed to keep tooltips after component mount/unmount\r\n    ReactTooltip.rebuild();\r\n\r\n    return () => {\r\n      // stop and remove intervals on unmount\r\n      StopwatchTimer.clear(false);\r\n      StopwatchTimer.clean();\r\n    }\r\n  }, [StopwatchTimer, setDone]);\r\n\r\n  // reset time to zero when adding timers in workout mode\r\n  useEffect(() => {\r\n    if (!workoutStart && workoutEditMode) {\r\n      StopwatchTimer.initializeTime(true, true);\r\n      StopwatchTimer.refresh();\r\n      setIsValidInput(false);\r\n    }\r\n  }, [workoutEditMode, StopwatchTimer, setIsValidInput, workoutStart])\r\n\r\n  const start = () => { setWorkoutStart(true); StopwatchTimer.start(false); setPaused(true); setEditMode(false); setDone(false); }\r\n  const pause = () => { setWorkoutStart(false); StopwatchTimer.clear(false); setPaused(false); }\r\n  const reset = () => { StopwatchTimer.reset(); setProgress(StopwatchTimer.percentComplete); }\r\n  const toggleEditMode = () => { pause(); fastForward(); setDone(false); setEditMode(!editMode); pause(); if (editMode) { reset(); } }\r\n  const fastForward = () => { StopwatchTimer.onFinished(); if(StopwatchTimer.onStart) StopwatchTimer.onStart(); setWorkoutStart(true); }\r\n  const runAgain = () => { reset(); setDone(false); }\r\n  const readOnlyMode = workoutStart ? true : workoutEditMode === false ? !editMode : !workoutEditMode;\r\n\r\n  useEffect(() => {\r\n    if (startNextTimer) { StopwatchTimer.start(false); setPaused(true); }\r\n  }, [startNextTimer, currentTimer, StopwatchTimer, setIsValidInput])\r\n\r\n  return <Panel>\r\n    <ProgressCircle progress={workoutEditMode ? 0 : progress} thickness=\"sm\" className=\"timer\">\r\n      <div>\r\n        <DisplayTime timer={StopwatchTimer} readOnly={readOnlyMode} className=\"panel-morph p-2\"></DisplayTime>\r\n        {WorkoutPanel(workoutEditMode, addWorkout, {\r\n          type: \"stopwatch\",\r\n          timer: StopwatchTimer\r\n        }, isValidInput)}\r\n      </div>\r\n    </ProgressCircle>\r\n    {!isDone && !workoutEditMode && ButtonsPanel(paused, start, pause, reset, fastForward, toggleEditMode, editMode)}\r\n\r\n    {!workoutEditMode && CongratsPanel(isDone, runAgain)}\r\n  </Panel>;\r\n}\r\n\r\nexport default Stopwatch;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport Panel from \"./../generic/Panel/Panel\";\r\nimport DisplayTime from \"./../generic/DisplayTime/DisplayTime\";\r\nimport ProgressCircle from \"./../generic/ProgressCircle/ProgressCircle\";\r\nimport { AppContext } from '../../context/AppContext';\r\nimport { CongratsPanel, ButtonsPanel, WorkoutPanel } from '../../utils/helpers';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Countdown = () => {\r\n\r\n  const { CountDownTimer, isDone, setDone, workoutEditMode, addWorkout, setIsValidInput,\r\n     workoutStart, startNextTimer, currentTimer, isValidInput,  setWorkoutStart } = useContext(AppContext);\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [paused, setPaused] = useState(false);\r\n  const [progress, setProgress] = useState(10000);\r\n\r\n  const start = () => {  setWorkoutStart(true); setDone(false); CountDownTimer.start(false); setPaused(true); setEditMode(false); }\r\n  const pause = () => {  setWorkoutStart(false); CountDownTimer.clear(false); setPaused(false); }\r\n  const reset = () => { CountDownTimer.reset(); setProgress(CountDownTimer.percentComplete);}\r\n  const toggleEditMode = () => { pause(); reset(); setEditMode(!editMode); }\r\n  const fastForward = () => { CountDownTimer.onFinished(); CountDownTimer.onStart(); setWorkoutStart(true); }\r\n  const runAgain = () => { reset(); setDone(false); }\r\n  const readOnlyMode = workoutStart ? true : workoutEditMode === false ? !editMode : !workoutEditMode;\r\n\r\n  useEffect(() => {\r\n    // Add state tick update and complet events to CountDownTimer object\r\n    CountDownTimer.pushIntervalFunction((CountDownTimer) => { setProgress(CountDownTimer.percentComplete); });\r\n\r\n    setProgress(CountDownTimer.percentComplete);\r\n\r\n    // Needed to keep tooltips after component mount/unmount\r\n    ReactTooltip.rebuild();\r\n\r\n    return () => {\r\n      // stop and remove intervals on unmount\r\n      CountDownTimer.clear(false);\r\n      CountDownTimer.clean();\r\n    }\r\n  }, [CountDownTimer, setDone]);\r\n\r\n  // reset time to zero when adding timers in workout mode\r\n  useEffect(() => {\r\n    if (!workoutStart && workoutEditMode) {\r\n      CountDownTimer.initializeTime(true, true);\r\n      CountDownTimer.refresh();\r\n      setIsValidInput(false);\r\n    }\r\n  }, [workoutEditMode, CountDownTimer, setIsValidInput, workoutStart])\r\n\r\n  // auto start timer, when startNextTimer flag is true\r\n  useEffect(() => {\r\n    if (startNextTimer) { CountDownTimer.start(false); setPaused(true); }\r\n  }, [startNextTimer, currentTimer, CountDownTimer])\r\n\r\n  return <Panel>\r\n    <ProgressCircle progress={workoutEditMode ? 0 : progress} thickness=\"sm\" size=\"lg\" className=\"timer\" >\r\n      <div><DisplayTime timer={CountDownTimer}\r\n        readOnly={readOnlyMode} className=\"panel-morph p-2\"></DisplayTime>\r\n        {WorkoutPanel(workoutEditMode, addWorkout, {\r\n          type: \"countdown\",\r\n          timer: CountDownTimer\r\n        }, isValidInput)}\r\n      </div>\r\n    </ProgressCircle>\r\n    {!isDone && !workoutEditMode && ButtonsPanel(paused, start, pause, reset, fastForward, toggleEditMode, editMode)}\r\n\r\n    {!workoutEditMode && CongratsPanel(isDone, runAgain)}\r\n\r\n  </Panel>;\r\n}\r\n\r\nexport default Countdown;\r\n","import { useContext, useState, useEffect } from \"react\";\r\nimport Panel from \"./../generic/Panel/Panel\";\r\nimport DisplayTime from \"./../generic/DisplayTime/DisplayTime\";\r\nimport ProgressCircle from \"./../generic/ProgressCircle/ProgressCircle\";\r\nimport TimeComponent from \"../generic/TimeComponent/TimeComponent\";\r\nimport { ButtonsPanel, CongratsPanel, WorkoutPanel } from '../../utils/helpers';\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst XY = () => {\r\n\r\n  const { XYTimer, isDone, setDone, workoutEditMode, addWorkout, isValidInput, setIsValidInput,\r\n    workoutStart, startNextTimer, currentTimer, setWorkoutStart } = useContext(AppContext);\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [roundProgress, setRoundProgress] = useState(0);\r\n  const [round, setRound] = useState(0);\r\n  const [paused, setPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    const setTimerState = (XYTimer) => {\r\n      setProgress(XYTimer.percentComplete);\r\n      setRoundProgress(XYTimer.roundPercentComplete);\r\n      setRound(XYTimer.currentRound);\r\n    };\r\n\r\n    XYTimer.pushIntervalFunction(setTimerState);\r\n\r\n    setTimerState(XYTimer);\r\n\r\n    // Needed to keep tooltips after component mount/unmount\r\n    ReactTooltip.rebuild();\r\n\r\n    return () => {\r\n      // stop and remove intervals on unmount\r\n      XYTimer.clear(false);\r\n      XYTimer.clean();\r\n    }\r\n  }, [XYTimer, setDone]);\r\n\r\n  // reset time to zero when adding timers in workout mode\r\n  useEffect(() => {\r\n    if (!workoutStart && workoutEditMode) {\r\n      XYTimer.initializeTime(true, true);\r\n      XYTimer.refresh();\r\n      setIsValidInput(false);\r\n    }\r\n  }, [workoutEditMode, XYTimer, setIsValidInput, workoutStart])\r\n\r\n  const start = () => { setWorkoutStart(true); XYTimer.start(false); setPaused(true); setEditMode(false); setDone(false); }\r\n  const pause = () => { setWorkoutStart(false); XYTimer.clear(false); setPaused(false); }\r\n  const reset = () => { XYTimer.reset(); setProgress(XYTimer.percentComplete); }\r\n  const toggleEditMode = () => { pause(); reset(); setEditMode(!editMode); }\r\n  const fastForward = () => { XYTimer.onFinished(); if(XYTimer.onStart) XYTimer.onStart(); }\r\n  const updateRound = (value) => { XYTimer.rounds = value; setRound(XYTimer.currentRound); }\r\n  const runAgain = () => { reset(); setDone(false); }\r\n\r\n  const readOnlyMode = workoutStart ? true : workoutEditMode === false ? !editMode : !workoutEditMode;\r\n\r\n  useEffect(() => {\r\n    if (startNextTimer) { XYTimer.start(false); setPaused(true); }\r\n  }, [startNextTimer, currentTimer, XYTimer])\r\n\r\n  return <Panel>\r\n    <ProgressCircle progress={workoutEditMode ? 0 : progress} className=\"timer\" size=\"xl\" thickness=\"sm\">\r\n      <div>\r\n        <ProgressCircle progress={workoutEditMode ? 0 : roundProgress} className=\"tiny-timer\" size=\"sm\" thickness=\"sm\">\r\n          <TimeComponent value={round} label=\"round\" readOnly={readOnlyMode}\r\n            onValueChange={(e) => { updateRound(e); setIsValidInput(XYTimer.isValidInput()) }}\r\n          ></TimeComponent>\r\n        </ProgressCircle>\r\n        <DisplayTime className=\"m-t-1\" timer={XYTimer} readOnly={readOnlyMode}></DisplayTime>\r\n        {WorkoutPanel(workoutEditMode, addWorkout, {\r\n          type: \"xy\",\r\n          timer: XYTimer\r\n        }, isValidInput)}\r\n      </div>\r\n    </ProgressCircle>\r\n    {!isDone && !workoutEditMode && ButtonsPanel(paused, start, pause, reset, fastForward, toggleEditMode, editMode)}\r\n    {!workoutEditMode && CongratsPanel(isDone, runAgain)}\r\n  </Panel>;\r\n}\r\n\r\nexport default XY;\r\n","import { useContext, useState, useEffect } from \"react\";\r\nimport Panel from \"./../generic/Panel/Panel\";\r\nimport ProgressCircle from \"./../generic/ProgressCircle/ProgressCircle\";\r\nimport TimeComponent from \"../generic/TimeComponent/TimeComponent\";\r\nimport { ButtonsPanel, CongratsPanel, WorkoutPanel } from '../../utils/helpers';\r\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\r\nimport \"./Tabata.scss\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Tabata = () => {\r\n\r\n  const {\r\n    IntervalTabata, setDone, isDone, workoutEditMode,\r\n    addWorkout, startNextTimer, currentTimer,\r\n    workoutStart, isValidInput, setIsValidInput, setWorkoutStart\r\n  } = useContext(AppContext);\r\n\r\n  const [TabataTimerA, TabataTimerB] = IntervalTabata.timers;\r\n  const [progressTabataTimerA, setProgressTabataTimerA] = useState(0);\r\n  const [progressTabataTimerB, setProgressTabataTimerB] = useState(0);\r\n  const [progressRound, setRoundProgress] = useState(0);\r\n  const [currentRound, setRound] = useState(0);\r\n  const [currentProgress, setProgress] = useState(0);\r\n  const [paused, setPaused] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const updateInterval = () => {\r\n    setRoundProgress(IntervalTabata.roundPercentage);\r\n    setRound(IntervalTabata.currentRound);\r\n    setProgress(IntervalTabata.percentComplete);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    let updateInterval = () => {\r\n      setRoundProgress(IntervalTabata.roundPercentage);\r\n      setRound(IntervalTabata.currentRound);\r\n      setProgress(IntervalTabata.percentComplete);\r\n    }\r\n\r\n    // push interval functions for workout timer\r\n    TabataTimerA.pushIntervalFunction((timer) => {\r\n      setProgressTabataTimerA(timer.percentComplete);\r\n      updateInterval();\r\n    })\r\n\r\n    // push interval functions for rest timer\r\n    TabataTimerB.pushIntervalFunction((timer) => {\r\n      setProgressTabataTimerB(timer.percentComplete);\r\n      updateInterval();\r\n    });\r\n\r\n    updateInterval();\r\n    setProgressTabataTimerA(TabataTimerA.percentComplete);\r\n    setProgressTabataTimerB(TabataTimerB.percentComplete);\r\n\r\n    // Needed to keep tooltips after component mount/unmount\r\n    ReactTooltip.rebuild();\r\n\r\n    return () => {\r\n      // stop and remove intervals on unmount\r\n      IntervalTabata.clear(false);\r\n      IntervalTabata.clean();\r\n    }\r\n  }, [IntervalTabata, TabataTimerA, TabataTimerB, setDone]);\r\n\r\n  const start = () => { setWorkoutStart(true); IntervalTabata.start(false); setPaused(true); setEditMode(false); setDone(false); };\r\n  const pause = () => { setWorkoutStart(false); IntervalTabata.clear(false); setPaused(false); };\r\n  const reset = () => { IntervalTabata.reset(); if(paused) IntervalTabata.start(); updateInterval(); };\r\n  const fastForward = () => { IntervalTabata.finish(); if(IntervalTabata.onStart) IntervalTabata.onStart() }\r\n  const toggleEditMode = () => { pause(); IntervalTabata.reset(); setEditMode(!editMode); };\r\n  const updateRound = (value) => { IntervalTabata.rounds = value; updateInterval(); }\r\n  const runAgain = () => { reset(); setDone(false); }\r\n\r\n  const readOnlyMode = workoutStart ? true : workoutEditMode === false ? !editMode : !workoutEditMode;\r\n\r\n  const showComponents = {\r\n    hours: false,\r\n    minutes: true,\r\n    seconds: true,\r\n    milliseconds: false\r\n  }\r\n\r\n  // reset time to zero when adding timers in workout mode\r\n  useEffect(() => {\r\n    if (!workoutStart && workoutEditMode) {\r\n      IntervalTabata.resetTime();\r\n      setRound(1);\r\n      setIsValidInput(false);\r\n    }\r\n  }, [workoutEditMode, IntervalTabata, setIsValidInput, workoutStart])\r\n\r\n  useEffect(() => {\r\n    if (startNextTimer) { IntervalTabata.start(false); setPaused(true); }\r\n  }, [startNextTimer, currentTimer, IntervalTabata])\r\n\r\n  return <Panel>\r\n    <ProgressCircle progress={workoutEditMode ? 0 : currentProgress} size=\"xl\" thickness=\"sm\" className=\"timer\">\r\n      <div className=\"tabata\">\r\n        <div>\r\n          <ProgressCircle progress={workoutEditMode ? 0 : progressRound} size=\"sm\" thickness=\"sm\" className=\"tiny-timer\">\r\n            <TimeComponent label=\"round\"\r\n              prependZero={true}\r\n              value={currentRound}\r\n              readOnly={readOnlyMode}\r\n              onValueChange={e => { updateRound(e); setIsValidInput(IntervalTabata.isValidInput()) }}></TimeComponent>\r\n          </ProgressCircle>\r\n        </div>\r\n        <div className=\"tabata-progress-panel\">\r\n          <ProgressCircle progress={workoutEditMode ? 0 : progressTabataTimerA} size=\"sm\" thickness=\"sm\" className=\"tiny-timer\">\r\n            <div className=\"tabata-progress-wrapper\">\r\n              <span className=\"tabata-label\">work</span>\r\n              <DisplayTime timer={TabataTimerA} className=\"small p-t-0\" readOnly={readOnlyMode} showComponents={showComponents}\r\n                triggerOnFinishedOnUnmount={false}\r\n              ></DisplayTime>\r\n            </div>\r\n          </ProgressCircle>\r\n          <ProgressCircle progress={workoutEditMode ? 0 : progressTabataTimerB} size=\"sm\" thickness=\"sm\" className=\"tiny-timer\">\r\n            <div className=\"tabata-progress-wrapper\">\r\n              <span className=\"tabata-label\">rest</span>\r\n              <DisplayTime timer={TabataTimerB} className=\"small p-t-0\" readOnly={readOnlyMode}\r\n                showComponents={showComponents}\r\n                triggerOnFinishedOnUnmount={false}\r\n              ></DisplayTime>\r\n            </div>\r\n          </ProgressCircle>\r\n        </div>\r\n        {WorkoutPanel(workoutEditMode, addWorkout, {\r\n          type: \"tabata\",\r\n          timer: IntervalTabata\r\n        }, isValidInput)}\r\n      </div>\r\n    </ProgressCircle>\r\n    {!isDone && !workoutEditMode && ButtonsPanel(paused, start, pause, reset, fastForward, toggleEditMode, editMode)}\r\n    {!workoutEditMode && CongratsPanel(isDone, runAgain)}\r\n  </Panel>;\r\n}\r\n\r\nexport default Tabata; ","import { Timer } from \"./Timer\";\r\n\r\nexport class Interval {\r\n    constructor({\r\n        timers = [],\r\n        rounds = 1,\r\n        completedRounds = 0,\r\n        serializedState = null,\r\n        onStart = null,\r\n        onFinished = null,\r\n        onReset = null,\r\n    } = {}) {\r\n        if (serializedState) {\r\n            this.deserialize(serializedState);\r\n        } else {\r\n            this.timers = timers;\r\n            this._rounds = rounds;\r\n        }\r\n        this._totalTime = null;\r\n        this._roundTime = null;\r\n        this._completedRounds = completedRounds;\r\n        this._currentTimerIndex = 0;\r\n        this.intializeTimers();\r\n\r\n        this.onReset = onReset;\r\n        this.onStart = onStart;\r\n        this.onFinished = onFinished;\r\n    }\r\n\r\n    deserialize(state) {\r\n        this.clear(false);\r\n        let { rounds, timers } = state;\r\n        this.timers = [\r\n            ...timers.map((timerState) => new Timer({ serializedState: timerState })),\r\n        ];\r\n        this._rounds = rounds;\r\n        this.reset();\r\n        this.intializeTimers();\r\n    }\r\n\r\n    serialize() {\r\n        return {\r\n            rounds: this.rounds,\r\n            timers: [...this.timers.map((timer) => timer.serialize())],\r\n        };\r\n    }\r\n\r\n    resetTime() {\r\n        this._rounds = 1;\r\n        for (let timer of this.timers) {\r\n            timer.initializeTime(true, true);\r\n            timer.refresh();\r\n        }\r\n    }\r\n\r\n    intializeTimers() {\r\n        for (let i = 0; i < this.timers.length; i++) {\r\n            let timer = this.timers[i];\r\n            let isLastTimer = this.timers.length - 1 === i;\r\n            timer.onFinished = () => {\r\n                this._currentTimerIndex = isLastTimer ? 0 : i + 1;\r\n                if (isLastTimer) {\r\n                    this._completedRounds++;\r\n                    if (this._completedRounds < this.rounds)\r\n                        this.timers.forEach((timer) => timer.reset());\r\n                }\r\n                if (this._completedRounds < this.rounds)\r\n                    this.timers[this._currentTimerIndex].start();\r\n                else if (this.onFinished && typeof this.onFinished === \"function\") {\r\n                    this.onFinished(this);\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    get totalTime() {\r\n        if (!this._totalTime) this._totalTime = this.roundTime * this.rounds;\r\n        return this._totalTime;\r\n    }\r\n\r\n    get currentTime() {\r\n        return (this.currentRound - 1) * this.roundTime + this.currentRoundTime;\r\n    }\r\n\r\n    valueOf(){\r\n        return this.currentTime;\r\n    }\r\n\r\n    get timeElapsed() {\r\n        return this.totalTime - this.currentTime;\r\n    }\r\n\r\n    get percentComplete() {\r\n        return Math.floor((10000 * this.currentTime) / this.totalTime);\r\n    }\r\n\r\n    get roundTime() {\r\n        if (!this._roundTime) {\r\n            this._roundTime = this.timers.reduce((prev, curr) => {\r\n                return prev + curr.totalTime;\r\n            }, 0);\r\n        }\r\n        return this._roundTime;\r\n    }\r\n\r\n    get currentRoundTime() {\r\n        return this.timers.reduce((prev, curr) => {\r\n            return prev + curr;\r\n        }, 0);\r\n    }\r\n\r\n    get roundPercentage() {\r\n        return Math.floor((10000 * this.currentRoundTime) / this.roundTime);\r\n    }\r\n\r\n    get rounds() {\r\n        return this._rounds;\r\n    }\r\n\r\n    set rounds(value) {\r\n        this._rounds = value;\r\n        this._totalTime = null;\r\n        this.reset();\r\n    }\r\n\r\n    get currentTimer() {\r\n        const { _currentTimerIndex: index, timers } = this;\r\n        if (timers.length > 0 && index < timers.length) return timers[index];\r\n        return null;\r\n    }\r\n\r\n    get currentRound() {\r\n        return this.rounds - this._completedRounds;\r\n    }\r\n\r\n    start(initializeTime = true) {\r\n        if (this.onStart) this.onStart(this);\r\n        if (this.currentRound === 0) {\r\n            this._completedRounds = 0;\r\n            this.timers.forEach((timer) => timer.reset());\r\n        }\r\n        if (this.currentTimer) this.currentTimer.start(initializeTime);\r\n    }\r\n\r\n    clear(triggerOnFinished = true) {\r\n        this.timers.forEach((timer) => timer.clear(triggerOnFinished));\r\n    }\r\n\r\n    reset() {\r\n        if(this.onReset) this.onReset(this);\r\n        this.timers.forEach((timer) => {\r\n            timer.clear(false);\r\n            timer.reset();\r\n        });\r\n        this._totalTime = null;\r\n        this._roundTime = null;\r\n        this._completedRounds = 0;\r\n        this._currentTimerIndex = 0;\r\n    }\r\n\r\n    clean() {\r\n        this.timers.forEach((timer) => {\r\n            timer.clean();\r\n        });\r\n    }\r\n\r\n    finishCurrent() {\r\n        if (this.currentRound === 0) this.reset();\r\n        else if (this.currentTimer) this.currentTimer.finishRound();\r\n    }\r\n\r\n    finish() {\r\n        this._completedRounds = this.rounds;\r\n        this.timers[this.timers.length-1].start();\r\n        this.timers[this.timers.length-1].finishRound();\r\n    }\r\n\r\n    isValidInput() {\r\n        let validState = true;\r\n        for (let timer of this.timers) {\r\n            if (!timer.isValidInput()) {\r\n                validState = false;\r\n                break;\r\n            }\r\n        }\r\n        return this.rounds > 0 && !isNaN(this.rounds) && validState;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Stopwatch from \"../components/timers/Stopwatch\";\r\nimport Countdown from \"../components/timers/Countdown\";\r\nimport XY from \"../components/timers/XY\";\r\nimport Tabata from \"../components/timers/Tabata\";\r\nimport { usePersistedState } from '../utils/helpers';\r\nimport { Timer } from '../classes/Timer';\r\nimport { Interval } from '../classes/Interval';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const AppContext = React.createContext({});\r\n\r\nconst WorkoutTimer = new Timer();\r\n\r\nconst CountDownTimer = new Timer({\r\n    minutes: 0,\r\n    seconds: 10,\r\n    tickSize: Timer.TIME_ENUM.MILLISECOND * 52,\r\n});\r\n\r\nconst XYTimer = new Timer({\r\n    seconds: 20,\r\n});\r\n\r\nconst StopwatchTimer = new Timer({\r\n    countdownMode: false,\r\n    seconds: 30\r\n});\r\n\r\nconst IntervalTabata = new Interval({\r\n    timers: [\r\n        new Timer({ seconds: 5 }),\r\n        new Timer({ seconds: 5 })],\r\n    rounds: 3\r\n});\r\n\r\nconst AppProvider = ({ children }) => {\r\n\r\n    const [timerIndex, setTimerIndex] = usePersistedState(\"selectedTimer\", 0);\r\n    const [isDone, setDone] = useState(false);\r\n    const [workoutEditMode, setWorkoutEditMode] = useState(false);\r\n    const [workoutQueue, setWorkoutQueue] = useState([]);\r\n    const [currentWorkout, setCurrentWorkout] = useState(null);\r\n    const [workoutStart, setWorkoutStart] = useState(false);\r\n    const [currentTimer, setCurrentTimer] = useState(null);\r\n    const [startNextTimer, setStartNextTimer] = useState(false);\r\n    const [isValidInput, setIsValidInput] = useState(false);\r\n    const [isLastTimer, setIsLastTimer] = useState(false);\r\n    const [queueBackup, setQueueBackup] = useState([]);\r\n    const [queueDuration, setQueueDuration] = useState({ hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });\r\n\r\n    // Adds workout to queue\r\n    const addWorkout = workout => {\r\n        workout.timeString = new Timer({ serializedState: GetSerializedTimerFromState(workout) }).toString();\r\n        let newQueue = [...workoutQueue, workout];\r\n        setQueueDuration(CalculateQueueDuration(newQueue));\r\n        setQueueBackup([...workoutQueue, workout]);\r\n        setWorkoutQueue(newQueue);\r\n        if (newQueue.length) setCurrentWorkout(newQueue[0]);\r\n        else setCurrentWorkout(null);\r\n        if (newQueue.length === 1) setIsLastTimer(true);\r\n        else setIsLastTimer(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Needed to keep tooltips after component mount/unmount\r\n        ReactTooltip.rebuild();\r\n    }, [isDone])\r\n\r\n    const timers = [\r\n        { title: \"Stopwatch\", C: <Stopwatch title={\"Stopwatch\"} /> },\r\n        { title: \"Countdown\", C: <Countdown title={\"Countdown\"} /> },\r\n        { title: \"XY\", C: <XY title={\"XY\"} /> },\r\n        { title: \"Tabata\", C: <Tabata title={\"Tabata\"} /> },\r\n    ];\r\n\r\n    // Sums up times from all workouts in a queue. Creates serialized timer state\r\n    const CalculateQueueDuration = queue => {\r\n        const intervalTime = {\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0,\r\n            milliseconds: 0,\r\n        };\r\n        queue.forEach(workout => {\r\n            const config = GetSerializedTimerFromState(workout);\r\n            [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].forEach(timeUnit => {\r\n                if (config[timeUnit] && config[timeUnit] > 0) intervalTime[timeUnit] += config[timeUnit];\r\n            })\r\n        })\r\n        return intervalTime;\r\n    }\r\n\r\n    // Calculates time string from serialized timer config\r\n    const GetSerializedTimerFromState = (state) => {\r\n        if (state && state.type)\r\n            switch (state.type) {\r\n                case \"stopwatch\":\r\n                case \"countdown\":\r\n                    return state.config;\r\n\r\n                case \"xy\":\r\n                    let stateCopy = { ...state.config };\r\n                    stateCopy.rounds = 1;\r\n                    let { rounds } = state.config;\r\n                    for (const [key, value] of Object.entries(stateCopy)) {\r\n                        if (key !== \"rounds\") stateCopy[key] = value * rounds;\r\n                    }\r\n                    return stateCopy;\r\n                case \"tabata\":\r\n                    const { timers } = state.config;\r\n                    const intervalTime = { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };\r\n                    for (let timer of timers) {\r\n                        for (const [key, value] of Object.entries(timer)) {\r\n                            if (key !== \"rounds\" && value) intervalTime[key] += value;\r\n                        }\r\n                    }\r\n                    for (const [key] of Object.entries(intervalTime)) {\r\n                        intervalTime[key] *= state.config.rounds;\r\n                    }\r\n                    return intervalTime;\r\n                default:\r\n                    return { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };\r\n            }\r\n        return { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };\r\n    };\r\n\r\n    // Remove Workout From Queue - updates queue object and updates current timer\r\n    const popQueue = () => {\r\n        workoutQueue.shift();\r\n        let newQueue = [...workoutQueue];\r\n        setWorkoutQueue(newQueue);\r\n        if (newQueue.length) {\r\n            setCurrentWorkout(newQueue[0]);\r\n        }\r\n        else { setCurrentWorkout(null); }\r\n        if (newQueue.length <= 1) setIsLastTimer(true);\r\n        else setIsLastTimer(false);\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    // Removes workout at index from queue. Triggers updates\r\n    const deleteWorkout = index => {\r\n        if (index > -1 && index < workoutQueue.length) {\r\n            workoutQueue.splice(index, 1);\r\n            setWorkoutQueue([...workoutQueue]);\r\n            setQueueBackup([...workoutQueue]);\r\n            setQueueDuration(CalculateQueueDuration(workoutQueue));\r\n            if (index === 0 && workoutQueue.length) setCurrentWorkout(workoutQueue[0]);\r\n            if (workoutQueue.length === 0) setCurrentWorkout(null);\r\n            if (workoutQueue.length === 1) setIsLastTimer(true);\r\n            if (workoutQueue.length === 0) setIsLastTimer(false);\r\n            setWorkoutStart(false);\r\n        }\r\n    }\r\n\r\n    // Restart Queue from backup\r\n    const runAgain = () => {\r\n        setWorkoutStart(false);\r\n        let newQueue = [...queueBackup];\r\n        setQueueDuration(CalculateQueueDuration(newQueue));\r\n        setWorkoutQueue(newQueue);\r\n        if (newQueue.length) setCurrentWorkout(newQueue[0]);\r\n        if (newQueue.length <= 1) setIsLastTimer(true);\r\n        else setIsLastTimer(false);\r\n    }\r\n\r\n    // Redefine onFinished events for timers\r\n    [CountDownTimer, StopwatchTimer, XYTimer, IntervalTabata].forEach(timer => {\r\n        // recalculates Workout timer on current timer start\r\n        timer.onStart = timer => {\r\n            WorkoutTimer.deserialize(CalculateQueueDuration(workoutQueue), true);\r\n        }\r\n        // recalculates Workout timer on current timer reset\r\n        timer.onReset = timer => {\r\n            WorkoutTimer.deserialize(CalculateQueueDuration(workoutQueue), true);\r\n        }\r\n        timer.onFinished = () => {\r\n            if (!workoutEditMode) {\r\n                popQueue();\r\n                setStartNextTimer(!isLastTimer);\r\n            }\r\n        }\r\n    });\r\n\r\n    return <AppContext.Provider\r\n        value={{\r\n            timers,\r\n            timerIndex,\r\n            setTimerIndex,\r\n            CountDownTimer,\r\n            XYTimer,\r\n            StopwatchTimer,\r\n            IntervalTabata,\r\n            WorkoutTimer,\r\n            isDone,\r\n            setDone,\r\n            workoutEditMode,\r\n            addWorkout,\r\n            workoutQueue,\r\n            setWorkoutEditMode,\r\n            workoutStart,\r\n            currentWorkout,\r\n            popQueue,\r\n            currentTimer,\r\n            setCurrentTimer,\r\n            setWorkoutStart,\r\n            setStartNextTimer,\r\n            startNextTimer,\r\n            deleteWorkout,\r\n            isValidInput,\r\n            setIsValidInput,\r\n            isLastTimer,\r\n            runAgain,\r\n            queueDuration\r\n        }}>\r\n        {children}\r\n    </AppContext.Provider>\r\n}\r\n\r\nexport default AppProvider;","import React from \"react\";\nimport \"./DocumentComponent.scss\";\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <div className=\" table-wrapper shadow-6 rounded m-b-4 \">\n        <h4 className=\"text-center\">{this.props.title}</h4>\n        <div className=\"\">\n          <div className=\"component-container m-r-2\">{this.props.component}</div>\n          <table className=\"sass-table\">\n            <thead>\n              <tr>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td className=\"code-font\">\n                      {doc.defaultValue}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ProgressBar.scss';\n\nclass ProgressBar extends Component {\n    render() {\n        const { progress, position, className, background } = this.props;\n        return <div className={['ProgressBar', className, position].join(\" \")}>\n            <div className={['progress', \"progress-\" + progress, background].join(\" \")}></div>\n        </div>;\n    }\n}\n\nProgressBar.propTypes = {\n    progress: PropTypes.number,\n    position: PropTypes.oneOf([\"bottom\", \"top\", \"left\", \"right\", null]),\n    className: PropTypes.string,\n    background: PropTypes.string\n}\n\nProgressBar.defaultProps = {\n    progress: 0,\n    position: null,\n    className: null,\n    background: \"gradient-primary-light-danger\"\n}\n\nexport default ProgressBar;","import styled from \"styled-components\";\nimport { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../context/AppContext\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Button from \"../components/generic/Button/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime/DisplayTime\";\nimport Input from \"../components/generic/Input/Input\";\nimport MatIcon from \"../components/generic/MatIcon\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport ProgressBar from \"../components/generic/ProgressBar/ProgressBar\";\nimport ProgressCircle from \"../components/generic/ProgressCircle/ProgressCircle\";\nimport TimeComponent from \"../components/generic/TimeComponent/TimeComponent\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Documentation = () => {\n\n  const { setWorkoutEditMode, setWorkoutStart, setStartNextTimer } = useContext(AppContext);\n\n  // Unpacks array into props used by propDocs prop of DocumentComponent\n  // Order of props is important\n  const unpack = (propsArray) => {\n    const [prop, description, type, defaultValue] = propsArray;\n    return { prop, description, type, defaultValue };\n  }\n\n  useEffect(() => {\n    setWorkoutEditMode(true);\n    setWorkoutStart(false);\n    setStartNextTimer(false);\n  }, [setStartNextTimer, setWorkoutStart, setWorkoutEditMode]);\n\n  return (\n    <Container>\n      <div>\n        <h1 className=\"text-center\">Documentation</h1>\n        <DocumentComponent\n          title=\"<Button></Button>\"\n          component={<Button className=\"p-x-2 p-y-1\" />}\n          propDocs={[\n            unpack([\"disabled\", \"disables / enables button\", \"bool\", \"false\"]),\n            unpack([\"className\", \"sets HTML class name\", \"string\", \"''\"]),\n            unpack([\"tooltip\", \"adds on hover tooltip\", \"string\", \"null\"]),\n            unpack([\"onButtonClick\", \"on click method\", \"func\", \"() => { }\"]),\n          ]}\n        />\n        <DocumentComponent\n          title=\"<DisplayTime />\"\n          component={<DisplayTime />}\n          propDocs={[\n            unpack([\"timer\", \"Timer object\", \"Timer\", \"new Timer(0)\"]),\n            unpack([\"className\", \"sets HTML class name\", \"string\", \"null\"]),\n            unpack([\"readOnly\", \"enable user editing of values when set to true\", \"bool\", \"true\"]),\n            unpack([\"triggerOnFinishedOnUnmount\", \"disabled or enabled triggering timer object onFinished event on component unmount\", \"bool\", \"true\"]),\n            unpack([\"showComponents\", \"disable / enable individual time-components\", \"object\", \"{ hours: true, minutes: true, seconds: true, milliseconds: true }\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<Input />\"\n          component={<Input value={5} />}\n          propDocs={[\n            unpack([\"type\", \"sets HTML input type\", \"string\", \"number\"]),\n            unpack([\"value\", \"sets HTML value attribute\", \"string | number\", \"N/A\"]),\n            unpack([\"disabled\", \"disables / enables input\", \"bool\", \"false\"]),\n            unpack([\"min\", \"sets HTML min attribute\", \"number\", \"0\"]),\n            unpack([\"max\", \"sets HTML max attribute\", \"number\", \"N/A\"]),\n            unpack([\"onValueChange\", \"onChange handler function. Fires when input is changed\", \"func\", \"()=>{ }\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<Panel></Panel>\"\n          component={<Panel className=\"shadow-6 round\">Hello Panel!</Panel>}\n          propDocs={[\n            unpack([\"className\", \"sets HTML class name\", \"string\", \"null\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<ProgressCircle></ProgressCircle>\"\n          component={<ProgressCircle size=\"sm\" progress={4534} className=\"text-center\">Hello Circle!</ProgressCircle>}\n          propDocs={[\n            unpack([\"progress\", \"sets progress amount\", \"number between 0 and 10000 where 10000 is 100%\", \"0\"]),\n            unpack([\"className\", \"sets HTML class name\", \"string\", \"null\"]),\n            unpack([\"thickness\", \"sets thickness of loader line\", 'string one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl', \"sm\"]),\n            unpack([\"thickness\", \"sets size of circle\", 'string one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"xxl', \"lg\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<ProgressBar />\"\n          component={<ProgressBar className=\"width-100px shadow-6\" progress={54} />}\n          propDocs={[\n            unpack([\"className\", \"sets HTML class name\", \"string\", \"null\"]),\n            unpack([\"position\", \"sets absolute position to one side of parent container\", \"string one of 'bottom', 'top', 'left', 'right', null\", \"null\"]),\n            unpack([\"progress\", \"sets progress amount\", \"number\", \"0\"]),\n            unpack([\"background\", \"sets CSS class for background of the filler bar\", \"string\", \"gradient-primary-light-danger\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<TimeComponent />\"\n          component={<TimeComponent className=\"shadow-6 text-center\" label=\"label\" prependZero={true} value={1} />}\n          propDocs={[\n            unpack([\"value\", \"sets value shown in time component\", \"number\", \"0\"]),\n            unpack([\"prependZero\", \"prepends zero to value if value lower than 10 when in readonly mode\", \"bool\", \"false\"]),\n            unpack([\"showColon\", \"adds ':' to the left of component\", \"bool\", \"false\"]),\n            unpack([\"label\", \"adds label under the value\", \"string\", \"null\"]),\n            unpack([\"readOnly\", \"when set to false, value can be changed by user\", \"bool\", \"true\"]),\n            unpack([\"onValueChange\", \"function which is triggered when input value changes\", \"func\", \"()=>{}\"])\n          ]}\n        />\n        <DocumentComponent\n          title=\"<MatIcon></MatIcon>\"\n          component={<MatIcon>computer</MatIcon>}\n          propDocs={[\n            unpack([\"children\", \"add display material icon string into this component to display it\", \"string\", \"null\"]),\n          ]}\n        />\n        <DocumentComponent\n          title=\"<WorkoutDisplay></WorkoutDisplay>\"\n          propDocs={[\n            unpack([\"N/A\", \"Display list of workouts, workout time and workout reset button. Uses AppContext\", \"N/A\", \"N/A\"]),\n          ]}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import { useContext, useState, useEffect } from \"react\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport Button from \"./../Button/Button\";\r\nimport MatIcon from \"./../MatIcon\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\n\r\nimport \"./WorkoutDisplay.scss\";\r\n\r\nconst WorkoutDisplay = () => {\r\n  const [timeString, setTimeString] = useState(\"\");\r\n  const { workoutQueue, deleteWorkout, workoutStart, queueDuration, WorkoutTimer, runAgain, setWorkoutStart } = useContext(AppContext);\r\n  const [progress, setProgress] = useState(10000);\r\n\r\n  useEffect(() => {\r\n    WorkoutTimer.deserialize(queueDuration);\r\n    setTimeString(WorkoutTimer.toString());\r\n  }, [queueDuration, WorkoutTimer])\r\n\r\n  useEffect(() => {\r\n    if (workoutStart) WorkoutTimer.start(false);\r\n    else WorkoutTimer.clear(false);\r\n  }, [workoutStart, WorkoutTimer]);\r\n\r\n  useEffect(() => {\r\n    // Add state tick update and complet events to CountDownTimer object\r\n    WorkoutTimer.pushIntervalFunction((WorkoutTimer) => { setTimeString(WorkoutTimer.toString()); setProgress(WorkoutTimer.percentComplete) });\r\n    return () => {\r\n      // stop and remove intervals on unmount\r\n      WorkoutTimer.clear(false);\r\n      WorkoutTimer.clean();\r\n    }\r\n  }, [WorkoutTimer]);\r\n\r\n  return (\r\n    <>\r\n      {workoutQueue.length > 0 && (<>\r\n        <ProgressBar progress={progress}></ProgressBar>\r\n        <div className=\"workout-display\">\r\n          <div className=\"text-center m-r-3\">\r\n            <div className=\"bold\">Workout</div>\r\n            {timeString}\r\n          </div>\r\n          <Button onButtonClick={() => {\r\n            runAgain(); if (workoutStart) setWorkoutStart(true);\r\n          }} className=\"m-r-3 p-1\">\r\n            <MatIcon>restart_alt</MatIcon> Reset\r\n          </Button>\r\n          {workoutQueue.map((workout, index) => {\r\n            return (\r\n              <div key={index} className={[\"workout\", index === 0 ? \"current\" : \"other\"].join(\" \")}>\r\n                {!workoutStart && (\r\n                  <Button\r\n                    onButtonClick={() => {\r\n                      deleteWorkout(index);\r\n                    }}\r\n                  >\r\n                    <MatIcon>close</MatIcon>\r\n                  </Button>\r\n                )}\r\n                <h6>{workout.type}</h6> {workout.timeString}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n      )\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nWorkoutDisplay.propTypes = {};\r\n\r\nWorkoutDisplay.defaultProps = {};\r\n\r\nexport default WorkoutDisplay;\r\n","import { AppContext } from \"./../context/AppContext\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CongratsPanel } from \"./../utils/helpers\";\r\nimport \"./TimersView.scss\";\r\nimport WorkoutDisplay from \"../components/generic/WorkoutDisplay/WorkoutDispaly\";\r\nimport XY from \"../components/timers/XY\";\r\nimport Tabata from \"../components/timers/Tabata\";\r\nimport Countdown from \"../components/timers/Countdown\";\r\nimport Stopwatch from \"../components/timers/Stopwatch\";\r\n\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst App = () => {\r\n  const {\r\n    StopwatchTimer,\r\n    CountDownTimer,\r\n    IntervalTabata,\r\n    XYTimer,\r\n    setWorkoutStart,\r\n    setCurrentTimer,\r\n    setWorkoutEditMode,\r\n    currentTimer,\r\n    currentWorkout,\r\n    setStartNextTimer,\r\n    isLastTimer,\r\n    runAgain,\r\n    workoutQueue\r\n  } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    setWorkoutEditMode(false);\r\n    setWorkoutStart(false);\r\n  }, [setWorkoutEditMode, setWorkoutStart]);\r\n\r\n  useEffect(() => {\r\n    if (currentTimer === null) setWorkoutStart(false);\r\n  }, [currentTimer, setWorkoutStart])\r\n\r\n  useEffect(() => {\r\n    ReactTooltip.rebuild();\r\n\r\n    const PrepareTimer = (Timer, TimerComponent, state) => {\r\n      Timer.deserialize(state.config);\r\n      setCurrentTimer(TimerComponent);\r\n    };\r\n\r\n    if (currentWorkout)\r\n      switch (currentWorkout.type) {\r\n        case \"stopwatch\":\r\n          PrepareTimer(StopwatchTimer, <Stopwatch />, currentWorkout);\r\n          break;\r\n        case \"tabata\":\r\n          PrepareTimer(IntervalTabata, <Tabata />, currentWorkout);\r\n          break;\r\n        case \"countdown\":\r\n          PrepareTimer(CountDownTimer, <Countdown />, currentWorkout);\r\n          break;\r\n        case \"xy\":\r\n          PrepareTimer(XYTimer, <XY />, currentWorkout);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    else {\r\n      setCurrentTimer(null);\r\n      setStartNextTimer(false);\r\n    }\r\n  }, [\r\n    currentWorkout,\r\n    setStartNextTimer,\r\n    CountDownTimer,\r\n    IntervalTabata,\r\n    StopwatchTimer,\r\n    XYTimer,\r\n    setCurrentTimer,\r\n    isLastTimer,\r\n    workoutQueue\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"grid typescale-md-major-third grid-col-span-12\">\r\n      <WorkoutDisplay />\r\n      {currentTimer}\r\n      {isLastTimer && currentTimer === null && <>\r\n        {CongratsPanel(true, runAgain)}\r\n      </>}\r\n      {!isLastTimer && !currentTimer && (\r\n        <div className=\"text-center m-t-5\">\r\n          The workout queue is empty!\r\n          <p className=\"m-t-2\">Get started by <Link to=\"/add\">adding some workouts </Link></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","\r\nimport \"./TimersView.scss\";\r\nimport Button from \"../components/generic/Button/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport WorkoutDisplay from \"../components/generic/WorkoutDisplay/WorkoutDispaly\";\r\nimport MatIcon from \"../components/generic/MatIcon\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst WorkoutView = () => {\r\n\r\n  const { timers, timerIndex, setTimerIndex, setWorkoutEditMode, setWorkoutStart, setStartNextTimer } = useContext(AppContext);\r\n  const CurrentTimer = timers.filter((timers, index) => index === timerIndex)[0].C;\r\n\r\n  ReactTooltip.rebuild();\r\n\r\n  useEffect(() => {\r\n    setWorkoutEditMode(true);\r\n    setWorkoutStart(false);\r\n    setStartNextTimer(false);\r\n  }, [setStartNextTimer, setWorkoutStart, setWorkoutEditMode]);\r\n\r\n  useEffect(() => {\r\n    if (CurrentTimer === null) setStartNextTimer(false);\r\n  }, [CurrentTimer, setStartNextTimer]);\r\n\r\n  return (\r\n    <div className=\"grid typescale-md-major-third grid-col-span-12\">\r\n\r\n      <div className=\"col-span-12 buttons m-t-2\">\r\n        {timers.map((timer, index) => (\r\n          <Button onButtonClick={() => { setTimerIndex(index) }}\r\n            className={[\"weight-500 p-x-3 p-y-1 bold\",\r\n              index === timerIndex ? \"selected text-dark\" : \"\"].join(\" \")}\r\n            key={index}\r\n          >{timer.title}</Button>\r\n        ))}\r\n      </div>\r\n      {CurrentTimer}\r\n      <div className=\"col-span-12 buttons m-t-1\">\r\n        <Link to=\"/\" className=\"m-r-2\">\r\n          <MatIcon>timer</MatIcon> Start Workout\r\n        </Link>\r\n      </div>\r\n      <WorkoutDisplay />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkoutView;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport DocumentationView from \"./views/DocumentationView\";\r\nimport TimersView from \"./views/TimersView\";\r\nimport WorkoutView from \"./views/WorkoutView\";\r\nimport \"material-icons/iconfont/material-icons.css\";\r\nimport MatIcon from \"./components/generic/MatIcon\";\r\n\r\nimport \"./style/roKit.css\";\r\nimport \"./style/main.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div\r\n      className=\"\r\n          p-0 \r\n          typescale-minor-second \r\n          typescale-sm-major-second \r\n          typescale-xl-minor-third \r\n          children-p-x-sm-10 \r\n          children-p-x-4\r\n          children-p-y-8\"\r\n    >\r\n      <Router>\r\n        <header className=\"p-y-0 slide-down-delay-0 fixed full-width z-3 top text-light\">\r\n          <nav className=\"p-lg-0 nav-flex nav-main typescale-minor-second max-width-center-xxl m-y-1\">\r\n            <h1 className=\"nowrap\" href=\"index.html\">\r\n              Rok's CSCI E39 Assignment #3\r\n            </h1>\r\n            <ul className=\"hover-light children-p-2 text-light nav-list\">\r\n              <li>\r\n                <Link to=\"/\">\r\n                  <MatIcon>timer</MatIcon> Start Workout \r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/add\">\r\n                  <MatIcon>add</MatIcon> Add Workout\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/docs\">\r\n                  <MatIcon>description</MatIcon> Documentation\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n\r\n        <section className=\"max-width-center-xxl p-b-0 m-b-0\">\r\n          <Switch>\r\n            <Route path=\"/add\">\r\n              <WorkoutView />\r\n            </Route>\r\n            <Route path=\"/docs\">\r\n              <DocumentationView />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <TimersView />\r\n            </Route>\r\n          </Switch>\r\n        </section>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ReactTooltip from 'react-tooltip';\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContext>\n      <App />\n      <ReactTooltip place=\"bottom\" type=\"info\" effect=\"solid\" delayShow={600} />\n    </AppContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}